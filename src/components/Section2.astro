---
import { Image } from "astro:assets";
import Pattern from "./Pattern.astro";
import "../styles/global.css";

type FeatureItem = {
  title: string;
  text: string;
  alt: string;
};

// Props
const { content } = Astro.props;

// Mapeo de imágenes
const imageMap = [
  await import("../assets/images/jugabilidad.webp"),
  await import("../assets/images/wardians.webp"),
  await import("../assets/images/personaliza.webp"),
  await import("../assets/images/modos.webp"),
  await import("../assets/images/multijugador.webp"),
  await import("../assets/images/progresa.webp"),
];
---

<section
  class="sticky top-0 h-screen z-20 bg-[url('/purple-background.webp')] bg-cover bg-center bg-fixed text-white flex flex-col items-center justify-center px-6 overflow-hidden fade-in-on-scroll"
>
  <Pattern />

  <!-- TÍTULO -->
  <div class="text-center lg:mt-40 mb-12 z-20 px-4">
    <h2
      class="font-lilita text-white text-4xl sm:text-5xl md:text-6xl lg:text-[100px] font-extrabold -rotate-2 uppercase"
      style="text-shadow: 4px 4px 0 rgba(0,0,0,1);"
    >
      {content.titleLine1}
    </h2>
    <h2
      class="font-lilita text-white text-4xl sm:text-5xl md:text-6xl lg:text-[100px] font-extrabold -rotate-2 uppercase"
      style="text-shadow: 4px 4px 0 rgba(0,0,0,1);"
    >
      {content.titleLine2}
    </h2>
  </div>

  <!-- FEATURES (DINÁMICO) -->
  <div
    class="grid grid-cols-2 grid-rows-3 gap-y-12 gap-x-8 z-20 px-4 sm:grid-cols-2 lg:grid-cols-3"
  >
    {
      content.features.map((feature: FeatureItem, index: number) => (
        <div class="flex flex-col items-center text-center">
          <div
            class={
              (index % 2 === 0 ? "animate-float-fast" : "animate-float-slow") +
              " w-20 sm:w-24 md:w-28 lg:w-32 mb-4"
            }
          >
            <Image src={imageMap[index].default} alt={feature.alt} />
          </div>
          <h3 class="text-lg md:text-xl font-bold mb-1">{feature.title}</h3>
          <p class="text-sm md:text-base max-w-xs text-white/80 hidden sm:block">
            {feature.text}
          </p>
        </div>
      ))
    }
  </div>
</section>

<style>
  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  .animate-float-slow {
    animation: float 6s ease-in-out infinite;
  }

  .animate-float-fast {
    animation: float 4s ease-in-out infinite;
  }

  .fade-in-on-scroll {
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }

  .fade-in-on-scroll.fade-in {
    opacity: 1;
  }
</style>

<script>
  if (typeof window !== "undefined") {
    const fadeObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("fade-in");
          } else {
            entry.target.classList.remove("fade-in");
          }
        });
      },
      { threshold: 0.4 }
    );

    document.querySelectorAll(".fade-in-on-scroll").forEach((el) => {
      fadeObserver.observe(el);
    });
  }
</script>
